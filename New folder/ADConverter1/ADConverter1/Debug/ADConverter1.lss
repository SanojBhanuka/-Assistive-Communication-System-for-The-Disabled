
ADConverter1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800200  000004a8  0000051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000056e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001244  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d15  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ce  00000000  00000000  000025c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00002c90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000657  00000000  00000000  00002de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ca  00000000  00000000  0000343b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003a05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	fe c1       	rjmp	.+1020   	; 0x402 <__vector_1>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ea       	ldi	r30, 0xA8	; 168
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 35       	cpi	r26, 0x52	; 82
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	37 d1       	rcall	.+622    	; 0x37e <main>
 110:	c9 c1       	rjmp	.+914    	; 0x4a4 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <Lcd_CmdWrite>:
#define LCD_RW 1
#define LCD_EN 2

void Lcd_CmdWrite(char cmd)
{
	LcdDataBus = (cmd & 0xF0);    //Set upper 4 bits of the cmd
 114:	98 2f       	mov	r25, r24
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	e8 e0       	ldi	r30, 0x08	; 8
 11a:	f1 e0       	ldi	r31, 0x01	; 1
 11c:	90 83       	st	Z, r25
	LcdControlBus &= ~(1<<LCD_RS);//Set RS pin to LOW
 11e:	90 81       	ld	r25, Z
 120:	9e 7f       	andi	r25, 0xFE	; 254
 122:	90 83       	st	Z, r25
	LcdControlBus &= ~(1<<LCD_RW);//Set RW pin to LOW
 124:	90 81       	ld	r25, Z
 126:	9d 7f       	andi	r25, 0xFD	; 253
 128:	90 83       	st	Z, r25
	LcdControlBus |= (1<<LCD_EN); //Generate High-to-Low pulse
 12a:	90 81       	ld	r25, Z
 12c:	94 60       	ori	r25, 0x04	; 4
 12e:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	af e3       	ldi	r26, 0x3F	; 63
 132:	bc e9       	ldi	r27, 0x9C	; 156
 134:	11 97       	sbiw	r26, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <Lcd_CmdWrite+0x20>
 138:	00 c0       	rjmp	.+0      	; 0x13a <Lcd_CmdWrite+0x26>
 13a:	00 00       	nop
	_delay_ms(10);
	LcdControlBus &= ~(1<<LCD_EN);
 13c:	90 81       	ld	r25, Z
 13e:	9b 7f       	andi	r25, 0xFB	; 251
 140:	90 83       	st	Z, r25
 142:	af e3       	ldi	r26, 0x3F	; 63
 144:	bc e9       	ldi	r27, 0x9C	; 156
 146:	11 97       	sbiw	r26, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <Lcd_CmdWrite+0x32>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <Lcd_CmdWrite+0x38>
 14c:	00 00       	nop
	
	_delay_ms(10);
	
	LcdDataBus = ((cmd<<4) & 0xF0);    //Set lower 4 bits of the cmd
 14e:	b0 e1       	ldi	r27, 0x10	; 16
 150:	8b 9f       	mul	r24, r27
 152:	c0 01       	movw	r24, r0
 154:	11 24       	eor	r1, r1
 156:	80 83       	st	Z, r24
	LcdControlBus &= ~(1<<LCD_RS);//Set RS pin to LOW
 158:	80 81       	ld	r24, Z
 15a:	8e 7f       	andi	r24, 0xFE	; 254
 15c:	80 83       	st	Z, r24
	LcdControlBus &= ~(1<<LCD_RW);//Set RW pin to LOW
 15e:	80 81       	ld	r24, Z
 160:	8d 7f       	andi	r24, 0xFD	; 253
 162:	80 83       	st	Z, r24
	LcdControlBus |= (1<<LCD_EN); //Generate High-to-Low pulse
 164:	80 81       	ld	r24, Z
 166:	84 60       	ori	r24, 0x04	; 4
 168:	80 83       	st	Z, r24
 16a:	8f e3       	ldi	r24, 0x3F	; 63
 16c:	9c e9       	ldi	r25, 0x9C	; 156
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <Lcd_CmdWrite+0x5a>
 172:	00 c0       	rjmp	.+0      	; 0x174 <Lcd_CmdWrite+0x60>
 174:	00 00       	nop
	_delay_ms(10);
	LcdControlBus &= ~(1<<LCD_EN);
 176:	80 81       	ld	r24, Z
 178:	8b 7f       	andi	r24, 0xFB	; 251
 17a:	80 83       	st	Z, r24
 17c:	af e3       	ldi	r26, 0x3F	; 63
 17e:	bc e9       	ldi	r27, 0x9C	; 156
 180:	11 97       	sbiw	r26, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <Lcd_CmdWrite+0x6c>
 184:	00 c0       	rjmp	.+0      	; 0x186 <Lcd_CmdWrite+0x72>
 186:	00 00       	nop
 188:	08 95       	ret

0000018a <Lcd_DataWrite>:
	_delay_ms(10);
}

void Lcd_DataWrite(char dat)
{
	LcdDataBus = (dat & 0xF0);    //Set upper 4 bits of the data
 18a:	98 2f       	mov	r25, r24
 18c:	90 7f       	andi	r25, 0xF0	; 240
 18e:	e8 e0       	ldi	r30, 0x08	; 8
 190:	f1 e0       	ldi	r31, 0x01	; 1
 192:	90 83       	st	Z, r25
	LcdControlBus |= (1<<LCD_RS);//Set RS pin to High
 194:	90 81       	ld	r25, Z
 196:	91 60       	ori	r25, 0x01	; 1
 198:	90 83       	st	Z, r25
	LcdControlBus &= ~(1<<LCD_RW);//Set RW pin to LOW
 19a:	90 81       	ld	r25, Z
 19c:	9d 7f       	andi	r25, 0xFD	; 253
 19e:	90 83       	st	Z, r25
	LcdControlBus |= (1<<LCD_EN); //Generate High-to-Low pulse
 1a0:	90 81       	ld	r25, Z
 1a2:	94 60       	ori	r25, 0x04	; 4
 1a4:	90 83       	st	Z, r25
 1a6:	af e3       	ldi	r26, 0x3F	; 63
 1a8:	bc e9       	ldi	r27, 0x9C	; 156
 1aa:	11 97       	sbiw	r26, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <Lcd_DataWrite+0x20>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <Lcd_DataWrite+0x26>
 1b0:	00 00       	nop
	_delay_ms(10);
	LcdControlBus &= ~(1<<LCD_EN);
 1b2:	90 81       	ld	r25, Z
 1b4:	9b 7f       	andi	r25, 0xFB	; 251
 1b6:	90 83       	st	Z, r25
 1b8:	af e3       	ldi	r26, 0x3F	; 63
 1ba:	bc e9       	ldi	r27, 0x9C	; 156
 1bc:	11 97       	sbiw	r26, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <Lcd_DataWrite+0x32>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <Lcd_DataWrite+0x38>
 1c2:	00 00       	nop
	
	_delay_ms(10);
	
	LcdDataBus = ((dat<<4) & 0xF0);    //Set lower 4 bits of the data
 1c4:	b0 e1       	ldi	r27, 0x10	; 16
 1c6:	8b 9f       	mul	r24, r27
 1c8:	c0 01       	movw	r24, r0
 1ca:	11 24       	eor	r1, r1
 1cc:	80 83       	st	Z, r24
	LcdControlBus |= (1<<LCD_RS);//Set RS pin to HIGH
 1ce:	80 81       	ld	r24, Z
 1d0:	81 60       	ori	r24, 0x01	; 1
 1d2:	80 83       	st	Z, r24
	LcdControlBus &= ~(1<<LCD_RW);//Set RW pin to LOW
 1d4:	80 81       	ld	r24, Z
 1d6:	8d 7f       	andi	r24, 0xFD	; 253
 1d8:	80 83       	st	Z, r24
	LcdControlBus |= (1<<LCD_EN); //Generate High-to-Low pulse
 1da:	80 81       	ld	r24, Z
 1dc:	84 60       	ori	r24, 0x04	; 4
 1de:	80 83       	st	Z, r24
 1e0:	8f e3       	ldi	r24, 0x3F	; 63
 1e2:	9c e9       	ldi	r25, 0x9C	; 156
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <Lcd_DataWrite+0x5a>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <Lcd_DataWrite+0x60>
 1ea:	00 00       	nop
	_delay_ms(10);
	LcdControlBus &= ~(1<<LCD_EN);
 1ec:	80 81       	ld	r24, Z
 1ee:	8b 7f       	andi	r24, 0xFB	; 251
 1f0:	80 83       	st	Z, r24
 1f2:	af e3       	ldi	r26, 0x3F	; 63
 1f4:	bc e9       	ldi	r27, 0x9C	; 156
 1f6:	11 97       	sbiw	r26, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <Lcd_DataWrite+0x6c>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <Lcd_DataWrite+0x72>
 1fc:	00 00       	nop
 1fe:	08 95       	ret

00000200 <Lcd_StringWrite>:
	_delay_ms(10);
}
void Lcd_StringWrite(const char* str)
{
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	ec 01       	movw	r28, r24
	while (*str) // Loop through the string until null terminator is found
 206:	02 c0       	rjmp	.+4      	; 0x20c <Lcd_StringWrite+0xc>
	{
		Lcd_DataWrite(*str); // Display one character at a time
 208:	c0 df       	rcall	.-128    	; 0x18a <Lcd_DataWrite>
		str++; // Move to the next character in the string
 20a:	21 96       	adiw	r28, 0x01	; 1
	LcdControlBus &= ~(1<<LCD_EN);
	_delay_ms(10);
}
void Lcd_StringWrite(const char* str)
{
	while (*str) // Loop through the string until null terminator is found
 20c:	88 81       	ld	r24, Y
 20e:	81 11       	cpse	r24, r1
 210:	fb cf       	rjmp	.-10     	; 0x208 <Lcd_StringWrite+0x8>
	{
		Lcd_DataWrite(*str); // Display one character at a time
		str++; // Move to the next character in the string
	}
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <Lcd_init>:

void Lcd_init(void)
{
	LcdDataBusDirnReg = 0xFF;	//LCD attached port as output
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	Lcd_CmdWrite(0x02); //Initialize LCD in 4-bit mode
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	79 df       	rcall	.-270    	; 0x114 <Lcd_CmdWrite>
	Lcd_CmdWrite(0x28); //enable 5x7 mode for chars
 222:	88 e2       	ldi	r24, 0x28	; 40
 224:	77 df       	rcall	.-274    	; 0x114 <Lcd_CmdWrite>
	Lcd_CmdWrite(0x0E); //Display OFF, Cursor ON
 226:	8e e0       	ldi	r24, 0x0E	; 14
 228:	75 df       	rcall	.-278    	; 0x114 <Lcd_CmdWrite>
	Lcd_CmdWrite(0x01); //Clear Display
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	73 cf       	rjmp	.-282    	; 0x114 <Lcd_CmdWrite>
 22e:	08 95       	ret

00000230 <Lcd_DisplayInt>:
 230:	cf 93       	push	r28
}

void Lcd_DisplayInt(int value)
{
 232:	df 93       	push	r29
 234:	ec 01       	movw	r28, r24
	int temp;
	Lcd_CmdWrite(0x01); // Clear Display
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	6d df       	rcall	.-294    	; 0x114 <Lcd_CmdWrite>

	if (value < 0)
 23a:	dd 23       	and	r29, r29
 23c:	34 f4       	brge	.+12     	; 0x24a <Lcd_DisplayInt+0x1a>
	{
		Lcd_DataWrite('-');
 23e:	8d e2       	ldi	r24, 0x2D	; 45
 240:	a4 df       	rcall	.-184    	; 0x18a <Lcd_DataWrite>
		value = -value;
 242:	d1 95       	neg	r29
 244:	c1 95       	neg	r28
 246:	d1 09       	sbc	r29, r1
 248:	05 c0       	rjmp	.+10     	; 0x254 <Lcd_DisplayInt+0x24>
	}
	else if (value == 0)
 24a:	20 97       	sbiw	r28, 0x00	; 0
	{
		Lcd_DataWrite('0');
 24c:	19 f4       	brne	.+6      	; 0x254 <Lcd_DisplayInt+0x24>
 24e:	80 e3       	ldi	r24, 0x30	; 48
 250:	9c df       	rcall	.-200    	; 0x18a <Lcd_DataWrite>
		return;
 252:	44 c0       	rjmp	.+136    	; 0x2dc <Lcd_DisplayInt+0xac>
	}

	temp = value / 10000;
 254:	ce 01       	movw	r24, r28
 256:	60 e1       	ldi	r22, 0x10	; 16
 258:	77 e2       	ldi	r23, 0x27	; 39
 25a:	fd d0       	rcall	.+506    	; 0x456 <__divmodhi4>
	if (temp > 0)
 25c:	16 16       	cp	r1, r22
 25e:	17 06       	cpc	r1, r23
		Lcd_DataWrite(temp + '0');
 260:	1c f4       	brge	.+6      	; 0x268 <Lcd_DisplayInt+0x38>
 262:	80 e3       	ldi	r24, 0x30	; 48
 264:	86 0f       	add	r24, r22

	value = value % 10000;
 266:	91 df       	rcall	.-222    	; 0x18a <Lcd_DataWrite>
 268:	ce 01       	movw	r24, r28
 26a:	60 e1       	ldi	r22, 0x10	; 16
 26c:	77 e2       	ldi	r23, 0x27	; 39
 26e:	f3 d0       	rcall	.+486    	; 0x456 <__divmodhi4>
	temp = value / 1000;
 270:	ec 01       	movw	r28, r24
 272:	68 ee       	ldi	r22, 0xE8	; 232
 274:	73 e0       	ldi	r23, 0x03	; 3
 276:	ef d0       	rcall	.+478    	; 0x456 <__divmodhi4>
	if (temp > 0 || value >= 1000)
 278:	16 16       	cp	r1, r22
 27a:	17 06       	cpc	r1, r23
 27c:	24 f0       	brlt	.+8      	; 0x286 <Lcd_DisplayInt+0x56>
 27e:	c8 3e       	cpi	r28, 0xE8	; 232
 280:	83 e0       	ldi	r24, 0x03	; 3
		Lcd_DataWrite(temp + '0');
 282:	d8 07       	cpc	r29, r24
 284:	1c f0       	brlt	.+6      	; 0x28c <Lcd_DisplayInt+0x5c>
 286:	80 e3       	ldi	r24, 0x30	; 48

	value = value % 1000;
 288:	86 0f       	add	r24, r22
 28a:	7f df       	rcall	.-258    	; 0x18a <Lcd_DataWrite>
 28c:	ce 01       	movw	r24, r28
 28e:	68 ee       	ldi	r22, 0xE8	; 232
 290:	73 e0       	ldi	r23, 0x03	; 3
 292:	e1 d0       	rcall	.+450    	; 0x456 <__divmodhi4>
	temp = value / 100;
 294:	ec 01       	movw	r28, r24
 296:	64 e6       	ldi	r22, 0x64	; 100
 298:	70 e0       	ldi	r23, 0x00	; 0
	if (temp > 0 || value >= 100)
 29a:	dd d0       	rcall	.+442    	; 0x456 <__divmodhi4>
 29c:	16 16       	cp	r1, r22
 29e:	17 06       	cpc	r1, r23
 2a0:	1c f0       	brlt	.+6      	; 0x2a8 <Lcd_DisplayInt+0x78>
 2a2:	c4 36       	cpi	r28, 0x64	; 100
		Lcd_DataWrite(temp + '0');
 2a4:	d1 05       	cpc	r29, r1
 2a6:	1c f0       	brlt	.+6      	; 0x2ae <Lcd_DisplayInt+0x7e>
 2a8:	80 e3       	ldi	r24, 0x30	; 48

	value = value % 100;
 2aa:	86 0f       	add	r24, r22
 2ac:	6e df       	rcall	.-292    	; 0x18a <Lcd_DataWrite>
 2ae:	ce 01       	movw	r24, r28
 2b0:	64 e6       	ldi	r22, 0x64	; 100
 2b2:	70 e0       	ldi	r23, 0x00	; 0
	temp = value / 10;
 2b4:	d0 d0       	rcall	.+416    	; 0x456 <__divmodhi4>
 2b6:	ec 01       	movw	r28, r24
 2b8:	6a e0       	ldi	r22, 0x0A	; 10
	if (temp > 0 || value >= 10)
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	cc d0       	rcall	.+408    	; 0x456 <__divmodhi4>
 2be:	16 16       	cp	r1, r22
 2c0:	17 06       	cpc	r1, r23
 2c2:	1c f0       	brlt	.+6      	; 0x2ca <Lcd_DisplayInt+0x9a>
		Lcd_DataWrite(temp + '0');
 2c4:	ca 30       	cpi	r28, 0x0A	; 10
 2c6:	d1 05       	cpc	r29, r1
 2c8:	1c f0       	brlt	.+6      	; 0x2d0 <Lcd_DisplayInt+0xa0>
 2ca:	80 e3       	ldi	r24, 0x30	; 48

	value = value % 10;
 2cc:	86 0f       	add	r24, r22
 2ce:	5d df       	rcall	.-326    	; 0x18a <Lcd_DataWrite>
 2d0:	ce 01       	movw	r24, r28
 2d2:	6a e0       	ldi	r22, 0x0A	; 10
 2d4:	70 e0       	ldi	r23, 0x00	; 0
	Lcd_DataWrite(value + '0');
 2d6:	bf d0       	rcall	.+382    	; 0x456 <__divmodhi4>
 2d8:	80 5d       	subi	r24, 0xD0	; 208
 2da:	57 df       	rcall	.-338    	; 0x18a <Lcd_DataWrite>
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <setLED>:

void initHardware(void);
void initADC(void);
int readADC(uint8_t);
void configExternalInterrupt0(void);
void setLED(){ PORTC |= 0B00000001;}
 2e2:	88 b1       	in	r24, 0x08	; 8
 2e4:	81 60       	ori	r24, 0x01	; 1
 2e6:	88 b9       	out	0x08, r24	; 8
 2e8:	08 95       	ret

000002ea <initUSART>:
	
void initUSART(void){
	UBRR0L = (unsigned char)(UBRR_VALUE);
 2ea:	87 e6       	ldi	r24, 0x67	; 103
 2ec:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UBRR0H = (unsigned char)(UBRR_VALUE>>8);
 2f0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 2f4:	e1 ec       	ldi	r30, 0xC1	; 193
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	88 61       	ori	r24, 0x18	; 24
 2fc:	80 83       	st	Z, r24
	UCSR0C |= (3<<UCSZ00);
 2fe:	e2 ec       	ldi	r30, 0xC2	; 194
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	86 60       	ori	r24, 0x06	; 6
 306:	80 83       	st	Z, r24
 308:	08 95       	ret

0000030a <transmitUSART>:
}
	
void transmitUSART(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
 30a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 30e:	95 ff       	sbrs	r25, 5
 310:	fc cf       	rjmp	.-8      	; 0x30a <transmitUSART>
	UDR0 = data;
 312:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 316:	08 95       	ret

00000318 <initHardware>:
	return 0;
}


void initHardware(void){
	DDRA = 0B00000000;
 318:	11 b8       	out	0x01, r1	; 1
	DDRC = 0B11111111;
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	87 b9       	out	0x07, r24	; 7
	DDRE = 0B11111110;
 31e:	8e ef       	ldi	r24, 0xFE	; 254
 320:	8d b9       	out	0x0d, r24	; 13
 322:	08 95       	ret

00000324 <initADC>:
	//DDRF = 0B00000000;
}

void initADC(void){
	ADCSRA |= (1<<ADEN); // ENABLE ADC
 324:	ea e7       	ldi	r30, 0x7A	; 122
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	80 68       	ori	r24, 0x80	; 128
 32c:	80 83       	st	Z, r24
	ADCSRA |= 0B00000111; //PRESCALAR 128
 32e:	80 81       	ld	r24, Z
 330:	87 60       	ori	r24, 0x07	; 7
 332:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // START THE CONVERSION
 334:	80 81       	ld	r24, Z
 336:	80 64       	ori	r24, 0x40	; 64
 338:	80 83       	st	Z, r24
 33a:	08 95       	ret

0000033c <readADC>:
}

int readADC(uint8_t adc_input_pin){
	//ADMUX & 0xF0 - This clear the first 4 bits of ADMUX register
	ADMUX = (ADMUX & 0xF0) | adc_input_pin; // 0xF0 = 1111 0000
 33c:	ec e7       	ldi	r30, 0x7C	; 124
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	90 81       	ld	r25, Z
 342:	90 7f       	andi	r25, 0xF0	; 240
 344:	89 2b       	or	r24, r25
 346:	80 83       	st	Z, r24
	ADMUX &= 0B00111111; // turning off the internal reference voltage
 348:	80 81       	ld	r24, Z
 34a:	8f 73       	andi	r24, 0x3F	; 63
 34c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 34e:	ea e7       	ldi	r30, 0x7A	; 122
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	80 64       	ori	r24, 0x40	; 64
 356:	80 83       	st	Z, r24
	
	while(ADCSRA & (1<<ADSC));
 358:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 35c:	86 fd       	sbrc	r24, 6
 35e:	fc cf       	rjmp	.-8      	; 0x358 <readADC+0x1c>
	return ADC;
 360:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 364:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
}
 368:	08 95       	ret

0000036a <configExternalInterrupt0>:

void configExternalInterrupt0(void)
{
	EICRA |= 0x03;
 36a:	e9 e6       	ldi	r30, 0x69	; 105
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	83 60       	ori	r24, 0x03	; 3
 372:	80 83       	st	Z, r24
	EIMSK |= 0x01;
 374:	8d b3       	in	r24, 0x1d	; 29
 376:	81 60       	ori	r24, 0x01	; 1
 378:	8d bb       	out	0x1d, r24	; 29
	sei();
 37a:	78 94       	sei
 37c:	08 95       	ret

0000037e <main>:
//volatile char num = 0x30;

int main(void)
{
	int adcValue;
	initHardware();
 37e:	cc df       	rcall	.-104    	; 0x318 <initHardware>
	initUSART();
 380:	b4 df       	rcall	.-152    	; 0x2ea <initUSART>
	initADC();
 382:	d0 df       	rcall	.-96     	; 0x324 <initADC>
	Lcd_init();
 384:	49 df       	rcall	.-366    	; 0x218 <Lcd_init>
	configExternalInterrupt0();
 386:	f1 df       	rcall	.-30     	; 0x36a <configExternalInterrupt0>
	
	/* Replace with your application code */
	while (1)
	{
		adcValue = readADC(0);
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	d8 df       	rcall	.-80     	; 0x33c <readADC>
 38c:	ec 01       	movw	r28, r24
		
		Lcd_CmdWrite(0x01); // Clear Display
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	c1 de       	rcall	.-638    	; 0x114 <Lcd_CmdWrite>
		Lcd_DataWrite("Pot Value: ");
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	92 e0       	ldi	r25, 0x02	; 2
 396:	f9 de       	rcall	.-526    	; 0x18a <Lcd_DataWrite>
 398:	ce 01       	movw	r24, r28
		Lcd_DisplayInt(adcValue); // Display the potentiometer value
 39a:	4a df       	rcall	.-364    	; 0x230 <Lcd_DisplayInt>
 39c:	80 ec       	ldi	r24, 0xC0	; 192
		
		// Set cursor to the beginning of the second line
		Lcd_CmdWrite(0xC0);
 39e:	ba de       	rcall	.-652    	; 0x114 <Lcd_CmdWrite>
 3a0:	c4 36       	cpi	r28, 0x64	; 100
 3a2:	d1 05       	cpc	r29, r1
		
		if (adcValue >= 0 && adcValue < 100)
 3a4:	20 f4       	brcc	.+8      	; 0x3ae <main+0x30>
 3a6:	8c e0       	ldi	r24, 0x0C	; 12
 3a8:	92 e0       	ldi	r25, 0x02	; 2
		{
			//num = '1';
			Lcd_StringWrite("Emergency Situation"); // Display instruction for the first range (0-100 ohms)
 3aa:	2a df       	rcall	.-428    	; 0x200 <Lcd_StringWrite>
 3ac:	20 c0       	rjmp	.+64     	; 0x3ee <main+0x70>
 3ae:	ce 01       	movw	r24, r28
 3b0:	84 56       	subi	r24, 0x64	; 100
		}
		else if (adcValue >= 100 && adcValue < 200)
 3b2:	91 09       	sbc	r25, r1
 3b4:	84 36       	cpi	r24, 0x64	; 100
 3b6:	91 05       	cpc	r25, r1
 3b8:	20 f4       	brcc	.+8      	; 0x3c2 <main+0x44>
 3ba:	80 e2       	ldi	r24, 0x20	; 32
 3bc:	92 e0       	ldi	r25, 0x02	; 2
		{
			//num = 2;
			Lcd_StringWrite("Need Medicine"); // Display instruction for the second range (100-200 ohms)
 3be:	20 df       	rcall	.-448    	; 0x200 <Lcd_StringWrite>
 3c0:	16 c0       	rjmp	.+44     	; 0x3ee <main+0x70>
 3c2:	ce 01       	movw	r24, r28
 3c4:	88 5c       	subi	r24, 0xC8	; 200
		}
		else if (adcValue >= 200 && adcValue < 300)
 3c6:	91 09       	sbc	r25, r1
 3c8:	84 36       	cpi	r24, 0x64	; 100
 3ca:	91 05       	cpc	r25, r1
 3cc:	20 f4       	brcc	.+8      	; 0x3d6 <main+0x58>
 3ce:	8e e2       	ldi	r24, 0x2E	; 46
		{
			//num = 3;
			Lcd_StringWrite("Need Water"); // Display instruction for the third range (200-300 ohms)
 3d0:	92 e0       	ldi	r25, 0x02	; 2
 3d2:	16 df       	rcall	.-468    	; 0x200 <Lcd_StringWrite>
 3d4:	0c c0       	rjmp	.+24     	; 0x3ee <main+0x70>
 3d6:	cc 52       	subi	r28, 0x2C	; 44
		}
		else if (adcValue >= 300 && adcValue < 400)
 3d8:	d1 40       	sbci	r29, 0x01	; 1
 3da:	c4 36       	cpi	r28, 0x64	; 100
 3dc:	d1 05       	cpc	r29, r1
 3de:	20 f4       	brcc	.+8      	; 0x3e8 <main+0x6a>
 3e0:	89 e3       	ldi	r24, 0x39	; 57
		{
			//num = 4;
			Lcd_StringWrite("Need food"); // Display instruction for the third range (200-300 ohms)
 3e2:	92 e0       	ldi	r25, 0x02	; 2
 3e4:	0d df       	rcall	.-486    	; 0x200 <Lcd_StringWrite>
 3e6:	03 c0       	rjmp	.+6      	; 0x3ee <main+0x70>
 3e8:	83 e4       	ldi	r24, 0x43	; 67
 3ea:	92 e0       	ldi	r25, 0x02	; 2
		}
		// Add more conditions for other value ranges and their corresponding instructions here...
		else
		{
			//num = 5;
			Lcd_StringWrite("Out of Range"); // Display a message if the value is outside the specified ranges
 3ec:	09 df       	rcall	.-494    	; 0x200 <Lcd_StringWrite>
 3ee:	2f ef       	ldi	r18, 0xFF	; 255
 3f0:	87 ea       	ldi	r24, 0xA7	; 167
 3f2:	91 e6       	ldi	r25, 0x61	; 97
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	80 40       	sbci	r24, 0x00	; 0
 3f8:	90 40       	sbci	r25, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x76>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x80>
 3fe:	00 00       	nop
 400:	c3 cf       	rjmp	.-122    	; 0x388 <main+0xa>

00000402 <__vector_1>:
 402:	1f 92       	push	r1
 404:	0f 92       	push	r0
 406:	0f b6       	in	r0, 0x3f	; 63
}



ISR(INT0_vect)
{
 408:	0f 92       	push	r0
 40a:	11 24       	eor	r1, r1
 40c:	0b b6       	in	r0, 0x3b	; 59
 40e:	0f 92       	push	r0
 410:	2f 93       	push	r18
 412:	3f 93       	push	r19
 414:	4f 93       	push	r20
 416:	5f 93       	push	r21
 418:	6f 93       	push	r22
 41a:	7f 93       	push	r23
 41c:	8f 93       	push	r24
 41e:	9f 93       	push	r25
 420:	af 93       	push	r26
 422:	bf 93       	push	r27
 424:	ef 93       	push	r30
 426:	ff 93       	push	r31
	setLED();
 428:	5c df       	rcall	.-328    	; 0x2e2 <setLED>
	transmitUSART("G");
 42a:	80 e5       	ldi	r24, 0x50	; 80
 42c:	92 e0       	ldi	r25, 0x02	; 2
 42e:	6d df       	rcall	.-294    	; 0x30a <transmitUSART>
}
 430:	ff 91       	pop	r31
 432:	ef 91       	pop	r30
 434:	bf 91       	pop	r27
 436:	af 91       	pop	r26
 438:	9f 91       	pop	r25
 43a:	8f 91       	pop	r24
 43c:	7f 91       	pop	r23
 43e:	6f 91       	pop	r22
 440:	5f 91       	pop	r21
 442:	4f 91       	pop	r20
 444:	3f 91       	pop	r19
 446:	2f 91       	pop	r18
 448:	0f 90       	pop	r0
 44a:	0b be       	out	0x3b, r0	; 59
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <__divmodhi4>:
 456:	97 fb       	bst	r25, 7
 458:	07 2e       	mov	r0, r23
 45a:	16 f4       	brtc	.+4      	; 0x460 <__divmodhi4+0xa>
 45c:	00 94       	com	r0
 45e:	06 d0       	rcall	.+12     	; 0x46c <__divmodhi4_neg1>
 460:	77 fd       	sbrc	r23, 7
 462:	08 d0       	rcall	.+16     	; 0x474 <__divmodhi4_neg2>
 464:	0b d0       	rcall	.+22     	; 0x47c <__udivmodhi4>
 466:	07 fc       	sbrc	r0, 7
 468:	05 d0       	rcall	.+10     	; 0x474 <__divmodhi4_neg2>
 46a:	3e f4       	brtc	.+14     	; 0x47a <__divmodhi4_exit>

0000046c <__divmodhi4_neg1>:
 46c:	90 95       	com	r25
 46e:	81 95       	neg	r24
 470:	9f 4f       	sbci	r25, 0xFF	; 255
 472:	08 95       	ret

00000474 <__divmodhi4_neg2>:
 474:	70 95       	com	r23
 476:	61 95       	neg	r22
 478:	7f 4f       	sbci	r23, 0xFF	; 255

0000047a <__divmodhi4_exit>:
 47a:	08 95       	ret

0000047c <__udivmodhi4>:
 47c:	aa 1b       	sub	r26, r26
 47e:	bb 1b       	sub	r27, r27
 480:	51 e1       	ldi	r21, 0x11	; 17
 482:	07 c0       	rjmp	.+14     	; 0x492 <__udivmodhi4_ep>

00000484 <__udivmodhi4_loop>:
 484:	aa 1f       	adc	r26, r26
 486:	bb 1f       	adc	r27, r27
 488:	a6 17       	cp	r26, r22
 48a:	b7 07       	cpc	r27, r23
 48c:	10 f0       	brcs	.+4      	; 0x492 <__udivmodhi4_ep>
 48e:	a6 1b       	sub	r26, r22
 490:	b7 0b       	sbc	r27, r23

00000492 <__udivmodhi4_ep>:
 492:	88 1f       	adc	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	5a 95       	dec	r21
 498:	a9 f7       	brne	.-22     	; 0x484 <__udivmodhi4_loop>
 49a:	80 95       	com	r24
 49c:	90 95       	com	r25
 49e:	bc 01       	movw	r22, r24
 4a0:	cd 01       	movw	r24, r26
 4a2:	08 95       	ret

000004a4 <_exit>:
 4a4:	f8 94       	cli

000004a6 <__stop_program>:
 4a6:	ff cf       	rjmp	.-2      	; 0x4a6 <__stop_program>
