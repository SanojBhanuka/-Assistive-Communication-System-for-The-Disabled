
sample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800200  00000502  00000596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000502  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  008002b6  008002b6  0000064c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001770  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d75  00000000  00000000  00001f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000960  00000000  00000000  00002ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00003604  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000722  00000000  00000000  00003868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c9  00000000  00000000  00003f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004653  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	44 c2       	rjmp	.+1160   	; 0x496 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e0       	ldi	r30, 0x02	; 2
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 3b       	cpi	r26, 0xB6	; 182
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 eb       	ldi	r26, 0xB6	; 182
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 3b       	cpi	r26, 0xB7	; 183
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	42 d1       	rcall	.+644    	; 0x3a4 <main>
 120:	ee c1       	rjmp	.+988    	; 0x4fe <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <twi_stop>:
	while (!(TWCR & (1<<TWINT)));				//--- Wait until No Acknowledgment Condition is transmitted to Slave
	while(TW_STATUS != TW_MR_DATA_NACK);		//--- Check for Acknowledgment
	usart_msg("Receiving MR Data NACK");		//--- Feedback msg to check error
	usart_tx(0x0D);								//--- Next Line
	return TWDR;								//--- Return received data
}
 124:	84 e9       	ldi	r24, 0x94	; 148
 126:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 12a:	08 95       	ret

0000012c <usart_init>:
 12c:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
 130:	88 e0       	ldi	r24, 0x08	; 8
 132:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
 13c:	88 e1       	ldi	r24, 0x18	; 24
 13e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 142:	08 95       	ret

00000144 <usart_tx>:
 144:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 148:	95 ff       	sbrs	r25, 5
 14a:	fc cf       	rjmp	.-8      	; 0x144 <usart_tx>
 14c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 150:	08 95       	ret

00000152 <usart_msg>:
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
 158:	02 c0       	rjmp	.+4      	; 0x15e <usart_msg+0xc>
 15a:	21 96       	adiw	r28, 0x01	; 1
 15c:	f3 df       	rcall	.-26     	; 0x144 <usart_tx>
 15e:	88 81       	ld	r24, Y
 160:	81 11       	cpse	r24, r1
 162:	fb cf       	rjmp	.-10     	; 0x15a <usart_msg+0x8>
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <twi_init>:
 16a:	e0 df       	rcall	.-64     	; 0x12c <usart_init>
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	f0 df       	rcall	.-32     	; 0x152 <usart_msg>
 172:	8d e0       	ldi	r24, 0x0D	; 13
 174:	e7 df       	rcall	.-50     	; 0x144 <usart_tx>
 176:	ec eb       	ldi	r30, 0xBC	; 188
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	8b 7f       	andi	r24, 0xFB	; 251
 17e:	80 83       	st	Z, r24
 180:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 184:	8c e0       	ldi	r24, 0x0C	; 12
 186:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
 18a:	84 e0       	ldi	r24, 0x04	; 4
 18c:	80 83       	st	Z, r24
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	8a 95       	dec	r24
 192:	f1 f7       	brne	.-4      	; 0x190 <twi_init+0x26>
 194:	00 00       	nop
 196:	08 95       	ret

00000198 <twi_start>:
 198:	84 ea       	ldi	r24, 0xA4	; 164
 19a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 19e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 1a2:	88 23       	and	r24, r24
 1a4:	e4 f7       	brge	.-8      	; 0x19e <twi_start+0x6>
 1a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 1aa:	88 7f       	andi	r24, 0xF8	; 248
 1ac:	88 30       	cpi	r24, 0x08	; 8
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <twi_start+0xe>
 1b0:	83 e4       	ldi	r24, 0x43	; 67
 1b2:	92 e0       	ldi	r25, 0x02	; 2
 1b4:	ce df       	rcall	.-100    	; 0x152 <usart_msg>
 1b6:	8d e0       	ldi	r24, 0x0D	; 13
 1b8:	c5 cf       	rjmp	.-118    	; 0x144 <usart_tx>
 1ba:	08 95       	ret

000001bc <twi_write_cmd>:
 1bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 1c0:	84 e8       	ldi	r24, 0x84	; 132
 1c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 1c6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 1ca:	88 23       	and	r24, r24
 1cc:	e4 f7       	brge	.-8      	; 0x1c6 <twi_write_cmd+0xa>
 1ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 1d2:	88 7f       	andi	r24, 0xF8	; 248
 1d4:	88 31       	cpi	r24, 0x18	; 24
 1d6:	d9 f7       	brne	.-10     	; 0x1ce <twi_write_cmd+0x12>
 1d8:	89 e0       	ldi	r24, 0x09	; 9
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	ba df       	rcall	.-140    	; 0x152 <usart_msg>
 1de:	8d e0       	ldi	r24, 0x0D	; 13
 1e0:	b1 cf       	rjmp	.-158    	; 0x144 <usart_tx>
 1e2:	08 95       	ret

000001e4 <twi_write_dwr>:
 1e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 1e8:	84 e8       	ldi	r24, 0x84	; 132
 1ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 1ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 1f2:	88 23       	and	r24, r24
 1f4:	e4 f7       	brge	.-8      	; 0x1ee <twi_write_dwr+0xa>
 1f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 1fa:	88 7f       	andi	r24, 0xF8	; 248
 1fc:	88 32       	cpi	r24, 0x28	; 40
 1fe:	d9 f7       	brne	.-10     	; 0x1f6 <twi_write_dwr+0x12>
 200:	81 e2       	ldi	r24, 0x21	; 33
 202:	92 e0       	ldi	r25, 0x02	; 2
 204:	a6 df       	rcall	.-180    	; 0x152 <usart_msg>
 206:	8d e0       	ldi	r24, 0x0D	; 13
 208:	9d cf       	rjmp	.-198    	; 0x144 <usart_tx>
 20a:	08 95       	ret

0000020c <PCF8574_write>:
unsigned char lcd = 0x00;						//--- Declaring a variable as lcd for data operation

/* Function to Write data in PCF8574 */

void PCF8574_write(unsigned char x)
{
 20c:	cf 93       	push	r28
 20e:	c8 2f       	mov	r28, r24
		twi_start();							//--- Start Condition 
 210:	c3 df       	rcall	.-122    	; 0x198 <twi_start>
		twi_write_cmd((PCF8574 << 1)| WRITE);	//--- SLA+W is Send 0x40 
 212:	80 e4       	ldi	r24, 0x40	; 64
 214:	d3 df       	rcall	.-90     	; 0x1bc <twi_write_cmd>
		twi_write_dwr(x);						//--- Data to Slave Device
 216:	8c 2f       	mov	r24, r28
 218:	e5 df       	rcall	.-54     	; 0x1e4 <twi_write_dwr>
		twi_stop();								//--- Stop Condition 
 21a:	84 df       	rcall	.-248    	; 0x124 <twi_stop>
 21c:	cf 91       	pop	r28
}
 21e:	08 95       	ret

00000220 <twi_lcd_4bit_send>:
 220:	cf 93       	push	r28

/* Function to Write 4-bit data to LCD */

void twi_lcd_4bit_send(unsigned char x)
{
 222:	c8 2f       	mov	r28, r24
	unsigned char temp = 0x00;					//--- temp variable for data operation
	
	lcd &= 0x0F;								//--- Masking last four bit to prevent the RS, RW, EN, Backlight
 224:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <__data_end>
 228:	8f 70       	andi	r24, 0x0F	; 15
	temp = (x & 0xF0);							//--- Masking higher 4-Bit of Data and send it LCD
 22a:	9c 2f       	mov	r25, r28
 22c:	90 7f       	andi	r25, 0xF0	; 240
	lcd |= temp;								//--- 4-Bit Data and LCD control Pin
 22e:	89 2b       	or	r24, r25
	lcd |= (0x04);								//--- Latching Data to LCD EN = 1
 230:	84 60       	ori	r24, 0x04	; 4
 232:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <__data_end>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT
 236:	ea df       	rcall	.-44     	; 0x20c <PCF8574_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	00 00       	nop
	_delay_us(1);								//--- 1us Delay
	lcd &= ~(0x04);								//--- Latching Complete
 23a:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <__data_end>
 23e:	8b 7f       	andi	r24, 0xFB	; 251
 240:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <__data_end>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT 
 244:	e3 df       	rcall	.-58     	; 0x20c <PCF8574_write>
 246:	00 c0       	rjmp	.+0      	; 0x248 <twi_lcd_4bit_send+0x28>
 248:	00 c0       	rjmp	.+0      	; 0x24a <twi_lcd_4bit_send+0x2a>
 24a:	00 00       	nop
	_delay_us(5);								//--- 5us Delay to Complete Latching
	
	
	temp = ((x & 0x0F)<<4);						//--- Masking Lower 4-Bit of Data and send it LCD
 24c:	80 e1       	ldi	r24, 0x10	; 16
 24e:	c8 9f       	mul	r28, r24
 250:	90 01       	movw	r18, r0
 252:	11 24       	eor	r1, r1
	lcd &= 0x0F;								//--- Masking last four bit to prevent the RS, RW, EN, Backlight					
 254:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <__data_end>
 258:	8f 70       	andi	r24, 0x0F	; 15
	lcd |= temp;								//--- 4-Bit Data and LCD control Pin
 25a:	82 2b       	or	r24, r18
	lcd |= (0x04);								//--- Latching Data to LCD EN = 1
 25c:	84 60       	ori	r24, 0x04	; 4
 25e:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <__data_end>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT
 262:	d4 df       	rcall	.-88     	; 0x20c <PCF8574_write>
 264:	00 00       	nop
	_delay_us(1);								//--- 1us Delay
	lcd &= ~(0x04);								//--- Latching Complete
 266:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <__data_end>
 26a:	8b 7f       	andi	r24, 0xFB	; 251
 26c:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <__data_end>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT
 270:	cd df       	rcall	.-102    	; 0x20c <PCF8574_write>
 272:	00 c0       	rjmp	.+0      	; 0x274 <twi_lcd_4bit_send+0x54>
 274:	00 c0       	rjmp	.+0      	; 0x276 <twi_lcd_4bit_send+0x56>
 276:	00 00       	nop
	_delay_us(5);								//--- 5us Delay to Complete Latching
	
}
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <twi_lcd_cmd>:

/* Function to Write to LCD Command Register */

void twi_lcd_cmd(unsigned char x)
{
 27c:	cf 93       	push	r28
 27e:	c8 2f       	mov	r28, r24
	lcd = 0x08;									//--- Enable Backlight Pin
 280:	88 e0       	ldi	r24, 0x08	; 8
 282:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <__data_end>
	lcd &= ~(0x01);								//--- Select Command Register By RS = 0
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT
 286:	c2 df       	rcall	.-124    	; 0x20c <PCF8574_write>
	twi_lcd_4bit_send(x);						//--- Function to Write 4-bit data to LCD 
 288:	8c 2f       	mov	r24, r28
 28a:	ca df       	rcall	.-108    	; 0x220 <twi_lcd_4bit_send>
	
}
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <twi_lcd_dwr>:

/* Function to Write to LCD Command Register */

void twi_lcd_dwr(unsigned char x)
{
 290:	cf 93       	push	r28
 292:	c8 2f       	mov	r28, r24
	lcd |= 0x09;								//--- Enable Backlight Pin & Select Data Register By RS = 1
 294:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <__data_end>
 298:	89 60       	ori	r24, 0x09	; 9
 29a:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <__data_end>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT	
 29e:	b6 df       	rcall	.-148    	; 0x20c <PCF8574_write>
	twi_lcd_4bit_send(x);						//--- Function to Write 4-bit data to LCD
 2a0:	8c 2f       	mov	r24, r28
 2a2:	be df       	rcall	.-132    	; 0x220 <twi_lcd_4bit_send>
}
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <twi_lcd_msg>:

/* Function to Send String of Data */

void twi_lcd_msg(char *c)
{
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	ec 01       	movw	r28, r24
	while (*c != '\0')							//--- Check Pointer for Null
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <twi_lcd_msg+0xc>
	twi_lcd_dwr(*c++);							//--- Send the String of Data
 2b0:	21 96       	adiw	r28, 0x01	; 1
 2b2:	ee df       	rcall	.-36     	; 0x290 <twi_lcd_dwr>

/* Function to Send String of Data */

void twi_lcd_msg(char *c)
{
	while (*c != '\0')							//--- Check Pointer for Null
 2b4:	88 81       	ld	r24, Y
 2b6:	81 11       	cpse	r24, r1
 2b8:	fb cf       	rjmp	.-10     	; 0x2b0 <twi_lcd_msg+0x8>
	twi_lcd_dwr(*c++);							//--- Send the String of Data
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <twi_lcd_clear>:

/* Function to Execute Clear LCD Command */

void twi_lcd_clear()
{
	twi_lcd_cmd(0x01);
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	dc cf       	rjmp	.-72     	; 0x27c <twi_lcd_cmd>
 2c4:	08 95       	ret

000002c6 <twi_lcd_init>:

/* Function to Initialize LCD in 4-Bit Mode, Cursor Setting and Row Selection */

void twi_lcd_init()
{	
	lcd = 0x04;						//--- EN = 1 for 25us initialize Sequence
 2c6:	84 e0       	ldi	r24, 0x04	; 4
 2c8:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <__data_end>
	PCF8574_write(lcd);
 2cc:	9f df       	rcall	.-194    	; 0x20c <PCF8574_write>
 2ce:	88 e0       	ldi	r24, 0x08	; 8
 2d0:	8a 95       	dec	r24
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <twi_lcd_init+0xa>
 2d4:	00 00       	nop
	_delay_us(25);
	
	twi_lcd_cmd(0x03);				//--- Initialize Sequence
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	d1 df       	rcall	.-94     	; 0x27c <twi_lcd_cmd>
	//twi_lcd_cmd(0x03);				//--- Initialize Sequence
	//twi_lcd_cmd(0x03);				//--- Initialize Sequence
	twi_lcd_cmd(0x02);				//--- Return to Home
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	cf df       	rcall	.-98     	; 0x27c <twi_lcd_cmd>
	twi_lcd_cmd(0x28);				//--- 4-Bit Mode 2 - Row Select
 2de:	88 e2       	ldi	r24, 0x28	; 40
 2e0:	cd df       	rcall	.-102    	; 0x27c <twi_lcd_cmd>
	twi_lcd_cmd(0x0F);				//--- Cursor on, Blinking on
 2e2:	8f e0       	ldi	r24, 0x0F	; 15
 2e4:	cb df       	rcall	.-106    	; 0x27c <twi_lcd_cmd>
	twi_lcd_cmd(0x01);				//--- Clear LCD
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	c9 df       	rcall	.-110    	; 0x27c <twi_lcd_cmd>
	twi_lcd_cmd(0x06);				//--- Auto increment Cursor
 2ea:	86 e0       	ldi	r24, 0x06	; 6
	twi_lcd_cmd(0x80);				//--- Row 1 Column 1 Address
 2ec:	c7 df       	rcall	.-114    	; 0x27c <twi_lcd_cmd>
 2ee:	80 e8       	ldi	r24, 0x80	; 128
	twi_lcd_msg("CODE-N-LOGIC");	//--- String Send to LCD
 2f0:	c5 df       	rcall	.-118    	; 0x27c <twi_lcd_cmd>
 2f2:	8c e7       	ldi	r24, 0x7C	; 124
 2f4:	92 e0       	ldi	r25, 0x02	; 2
 2f6:	d8 df       	rcall	.-80     	; 0x2a8 <twi_lcd_msg>
	//_delay_ms(1000);				//--- 1s Delay
	twi_lcd_clear();				//--- Clear LCD
 2f8:	e3 df       	rcall	.-58     	; 0x2c0 <twi_lcd_clear>
 2fa:	80 e8       	ldi	r24, 0x80	; 128
	twi_lcd_cmd(0x80);				//-
 2fc:	bf cf       	rjmp	.-130    	; 0x27c <twi_lcd_cmd>
 2fe:	08 95       	ret

00000300 <setLED>:
 300:	85 b1       	in	r24, 0x05	; 5
 302:	81 60       	ori	r24, 0x01	; 1
void initADC(void);
int readADC(uint8_t);
void initUSART(void);
void transmitUSART(unsigned char);
void configExternalInterrupt0(void);
void setLED(){PORTB |= 0B00000001;};
 304:	85 b9       	out	0x05, r24	; 5
 306:	08 95       	ret

00000308 <clearLED>:
void clearLED(){PORTB &= 0B11111110;};
 308:	85 b1       	in	r24, 0x05	; 5
 30a:	8e 7f       	andi	r24, 0xFE	; 254
 30c:	85 b9       	out	0x05, r24	; 5
 30e:	08 95       	ret

00000310 <initHardware>:
	return 0;
}

void initHardware(void)
{
	DDRA = 0B00000000;
 310:	11 b8       	out	0x01, r1	; 1
	DDRC = 0B11111111;
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	87 b9       	out	0x07, r24	; 7
	DDRE &= ~(1 << PE0); // Set PE0 (ADC input) as input
 316:	8d b1       	in	r24, 0x0d	; 13
 318:	8e 7f       	andi	r24, 0xFE	; 254
 31a:	8d b9       	out	0x0d, r24	; 13
	DDRB |= 0B00000001;
 31c:	84 b1       	in	r24, 0x04	; 4
 31e:	81 60       	ori	r24, 0x01	; 1
 320:	84 b9       	out	0x04, r24	; 4
 322:	08 95       	ret

00000324 <initADC>:
}

void initADC(void)
{
	ADCSRA |= (1 << ADEN);     // Enable ADC
 324:	ea e7       	ldi	r30, 0x7A	; 122
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	80 68       	ori	r24, 0x80	; 128
 32c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescaler to 128
 32e:	80 81       	ld	r24, Z
 330:	87 60       	ori	r24, 0x07	; 7
 332:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);     // Set ADC reference voltage to AVcc
 334:	ec e7       	ldi	r30, 0x7C	; 124
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	80 64       	ori	r24, 0x40	; 64
 33c:	80 83       	st	Z, r24
 33e:	08 95       	ret

00000340 <readADC>:
}

int readADC(uint8_t adc_input_pin)
{
	ADMUX = (ADMUX & 0xF8) | (adc_input_pin & 0x07); // Clear first 3 bits of ADMUX and set ADC input pin
 340:	ec e7       	ldi	r30, 0x7C	; 124
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	90 81       	ld	r25, Z
 346:	98 7f       	andi	r25, 0xF8	; 248
 348:	87 70       	andi	r24, 0x07	; 7
 34a:	89 2b       	or	r24, r25
 34c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Start ADC conversion
 34e:	ea e7       	ldi	r30, 0x7A	; 122
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	80 64       	ori	r24, 0x40	; 64
 356:	80 83       	st	Z, r24

	while (ADCSRA & (1 << ADSC)); // Wait for conversion to finish
 358:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 35c:	86 fd       	sbrc	r24, 6
 35e:	fc cf       	rjmp	.-8      	; 0x358 <readADC+0x18>

	return ADC;
 360:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 364:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
}
 368:	08 95       	ret

0000036a <initUSART>:

void initUSART(void)
{
	UBRR0L = (unsigned char)(UBRR_VALUE);
 36a:	87 e6       	ldi	r24, 0x67	; 103
 36c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UBRR0H = (unsigned char)(UBRR_VALUE >> 8);
 370:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>

	UCSR0B = (1 << TXEN0); // Enable USART transmitter
 374:	88 e0       	ldi	r24, 0x08	; 8
 376:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (3 << UCSZ00); // Set frame format: 8 data bits, no parity, 1 stop bit
 37a:	86 e0       	ldi	r24, 0x06	; 6
 37c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 380:	08 95       	ret

00000382 <transmitUSART>:
}

void transmitUSART(unsigned char data)
{
	while (!(UCSR0A & (1 << UDRE0))); // Wait for empty transmit buffer
 382:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 386:	95 ff       	sbrs	r25, 5
 388:	fc cf       	rjmp	.-8      	; 0x382 <transmitUSART>
	UDR0 = data; // Transmit data
 38a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 38e:	08 95       	ret

00000390 <configExternalInterrupt0>:
}

void configExternalInterrupt0(void)
{
	EICRA |= 0x03;
 390:	e9 e6       	ldi	r30, 0x69	; 105
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	83 60       	ori	r24, 0x03	; 3
 398:	80 83       	st	Z, r24
	EIMSK |= 0x04;
 39a:	8d b3       	in	r24, 0x1d	; 29
 39c:	84 60       	ori	r24, 0x04	; 4
 39e:	8d bb       	out	0x1d, r24	; 29
	sei();
 3a0:	78 94       	sei
 3a2:	08 95       	ret

000003a4 <main>:
volatile int flag = 0; // Use volatile for variables accessed in ISR

int main(void) {
	int adcValue;

	initHardware();
 3a4:	b5 df       	rcall	.-150    	; 0x310 <initHardware>
	initUSART();
 3a6:	e1 df       	rcall	.-62     	; 0x36a <initUSART>
	initADC();
 3a8:	bd df       	rcall	.-134    	; 0x324 <initADC>
	twi_init();
 3aa:	df de       	rcall	.-578    	; 0x16a <twi_init>
	twi_lcd_init();
 3ac:	8c df       	rcall	.-232    	; 0x2c6 <twi_lcd_init>
 3ae:	f0 df       	rcall	.-32     	; 0x390 <configExternalInterrupt0>
	configExternalInterrupt0();
 3b0:	80 e0       	ldi	r24, 0x00	; 0


	while (1) {
		
		adcValue = readADC(0);
 3b2:	c6 df       	rcall	.-116    	; 0x340 <readADC>
 3b4:	ec 01       	movw	r28, r24
 3b6:	81 e0       	ldi	r24, 0x01	; 1

		twi_lcd_cmd(0x01); // Clear Display
 3b8:	61 df       	rcall	.-318    	; 0x27c <twi_lcd_cmd>
 3ba:	80 e8       	ldi	r24, 0x80	; 128
 3bc:	5f df       	rcall	.-322    	; 0x27c <twi_lcd_cmd>
		twi_lcd_cmd(0x80); // Set cursor to the beginning of the first line
 3be:	c8 3c       	cpi	r28, 0xC8	; 200
 3c0:	d1 05       	cpc	r29, r1

		if (adcValue >= 0 && adcValue < 200) {
 3c2:	80 f4       	brcc	.+32     	; 0x3e4 <main+0x40>
 3c4:	81 e4       	ldi	r24, 0x41	; 65
 3c6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
			letter = 'A';
 3ca:	89 e8       	ldi	r24, 0x89	; 137
 3cc:	92 e0       	ldi	r25, 0x02	; 2
			twi_lcd_msg("Emergency ");
 3ce:	6c df       	rcall	.-296    	; 0x2a8 <twi_lcd_msg>
 3d0:	2f e7       	ldi	r18, 0x7F	; 127
 3d2:	84 e8       	ldi	r24, 0x84	; 132
 3d4:	9e e1       	ldi	r25, 0x1E	; 30
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	90 40       	sbci	r25, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x32>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <main+0x3c>
 3e0:	00 00       	nop
 3e2:	56 c0       	rjmp	.+172    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 3e4:	ce 01       	movw	r24, r28
 3e6:	88 5c       	subi	r24, 0xC8	; 200
 3e8:	91 09       	sbc	r25, r1
				
			}*/
			_delay_ms(10000);
			
	
			} else if (adcValue >= 200 && adcValue < 400) {
 3ea:	88 3c       	cpi	r24, 0xC8	; 200
 3ec:	91 05       	cpc	r25, r1
 3ee:	80 f4       	brcc	.+32     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f0:	82 e4       	ldi	r24, 0x42	; 66
 3f2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
			letter = 'B';
 3f6:	84 e9       	ldi	r24, 0x94	; 148
 3f8:	92 e0       	ldi	r25, 0x02	; 2
			twi_lcd_msg("Need Medicine");
 3fa:	56 df       	rcall	.-340    	; 0x2a8 <twi_lcd_msg>
 3fc:	2f e7       	ldi	r18, 0x7F	; 127
 3fe:	84 e8       	ldi	r24, 0x84	; 132
 400:	9e e1       	ldi	r25, 0x1E	; 30
 402:	21 50       	subi	r18, 0x01	; 1
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
 40e:	40 c0       	rjmp	.+128    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 410:	ce 01       	movw	r24, r28
 412:	80 59       	subi	r24, 0x90	; 144
 414:	91 40       	sbci	r25, 0x01	; 1
				
			}*/
			_delay_ms(10000);
			
	
			} else if (adcValue >= 400 && adcValue < 600) {
 416:	88 3c       	cpi	r24, 0xC8	; 200
 418:	91 05       	cpc	r25, r1
 41a:	80 f4       	brcc	.+32     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 41c:	83 e4       	ldi	r24, 0x43	; 67
 41e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
			letter = 'C';
 422:	82 ea       	ldi	r24, 0xA2	; 162
 424:	92 e0       	ldi	r25, 0x02	; 2
			twi_lcd_msg("Need Water");
 426:	40 df       	rcall	.-384    	; 0x2a8 <twi_lcd_msg>
 428:	2f e7       	ldi	r18, 0x7F	; 127
 42a:	84 e8       	ldi	r24, 0x84	; 132
 42c:	9e e1       	ldi	r25, 0x1E	; 30
 42e:	21 50       	subi	r18, 0x01	; 1
 430:	80 40       	sbci	r24, 0x00	; 0
 432:	90 40       	sbci	r25, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 438:	00 00       	nop
 43a:	2a c0       	rjmp	.+84     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 43c:	c8 55       	subi	r28, 0x58	; 88
 43e:	d2 40       	sbci	r29, 0x02	; 2
				_delay_ms(30000);
				
			}*/
			_delay_ms(10000);
	
			} else if (adcValue >= 600 && adcValue < 800) {
 440:	c8 3c       	cpi	r28, 0xC8	; 200
 442:	d1 05       	cpc	r29, r1
 444:	80 f4       	brcc	.+32     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 446:	84 e4       	ldi	r24, 0x44	; 68
 448:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
			letter = 'D';
 44c:	8d ea       	ldi	r24, 0xAD	; 173
 44e:	92 e0       	ldi	r25, 0x02	; 2
			twi_lcd_msg("Food");
 450:	2b df       	rcall	.-426    	; 0x2a8 <twi_lcd_msg>
 452:	2f e7       	ldi	r18, 0x7F	; 127
 454:	84 e8       	ldi	r24, 0x84	; 132
 456:	9e e1       	ldi	r25, 0x1E	; 30
 458:	21 50       	subi	r18, 0x01	; 1
 45a:	80 40       	sbci	r24, 0x00	; 0
 45c:	90 40       	sbci	r25, 0x00	; 0
 45e:	e1 f7       	brne	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 462:	00 00       	nop
 464:	15 c0       	rjmp	.+42     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 466:	82 eb       	ldi	r24, 0xB2	; 178
 468:	92 e0       	ldi	r25, 0x02	; 2
				
			}*/
			_delay_ms(10000);
	
			} else {
			twi_lcd_msg("Out");
 46a:	1e df       	rcall	.-452    	; 0x2a8 <twi_lcd_msg>
 46c:	2f e7       	ldi	r18, 0x7F	; 127
 46e:	84 e8       	ldi	r24, 0x84	; 132
 470:	9e e1       	ldi	r25, 0x1E	; 30
 472:	21 50       	subi	r18, 0x01	; 1
 474:	80 40       	sbci	r24, 0x00	; 0
 476:	90 40       	sbci	r25, 0x00	; 0
 478:	e1 f7       	brne	.-8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 47c:	00 00       	nop
 47e:	2f e7       	ldi	r18, 0x7F	; 127
 480:	84 e8       	ldi	r24, 0x84	; 132
 482:	9e e1       	ldi	r25, 0x1E	; 30
 484:	21 50       	subi	r18, 0x01	; 1
 486:	80 40       	sbci	r24, 0x00	; 0
 488:	90 40       	sbci	r25, 0x00	; 0
 48a:	e1 f7       	brne	.-8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48e:	00 00       	nop
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	f4 de       	rcall	.-536    	; 0x27c <twi_lcd_cmd>
			_delay_ms(30000);
			
			}*/

		
		twi_lcd_cmd(0x01); // Clear Display
 494:	8d cf       	rjmp	.-230    	; 0x3b0 <main+0xc>

00000496 <__vector_3>:
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
		
	}
 49a:	0f b6       	in	r0, 0x3f	; 63
	EIMSK |= 0x04;
	sei();
}

ISR(INT2_vect)
{
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
 4a0:	0b b6       	in	r0, 0x3b	; 59
 4a2:	0f 92       	push	r0
 4a4:	2f 93       	push	r18
 4a6:	3f 93       	push	r19
 4a8:	4f 93       	push	r20
 4aa:	5f 93       	push	r21
 4ac:	6f 93       	push	r22
 4ae:	7f 93       	push	r23
 4b0:	8f 93       	push	r24
 4b2:	9f 93       	push	r25
 4b4:	af 93       	push	r26
 4b6:	bf 93       	push	r27
 4b8:	ef 93       	push	r30
 4ba:	ff 93       	push	r31
	transmitUSART(letter);
 4bc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 4c0:	60 df       	rcall	.-320    	; 0x382 <transmitUSART>
	setLED();
 4c2:	1e df       	rcall	.-452    	; 0x300 <setLED>
 4c4:	2f e7       	ldi	r18, 0x7F	; 127
 4c6:	8a e1       	ldi	r24, 0x1A	; 26
 4c8:	96 e0       	ldi	r25, 0x06	; 6
 4ca:	21 50       	subi	r18, 0x01	; 1
 4cc:	80 40       	sbci	r24, 0x00	; 0
 4ce:	90 40       	sbci	r25, 0x00	; 0
 4d0:	e1 f7       	brne	.-8      	; 0x4ca <__vector_3+0x34>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <__vector_3+0x3e>
 4d4:	00 00       	nop
	_delay_ms(2000);
	clearLED();
 4d6:	18 df       	rcall	.-464    	; 0x308 <clearLED>
 4d8:	ff 91       	pop	r31
	//_delay_ms(30000);
	

}
 4da:	ef 91       	pop	r30
 4dc:	bf 91       	pop	r27
 4de:	af 91       	pop	r26
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	7f 91       	pop	r23
 4e6:	6f 91       	pop	r22
 4e8:	5f 91       	pop	r21
 4ea:	4f 91       	pop	r20
 4ec:	3f 91       	pop	r19
 4ee:	2f 91       	pop	r18
 4f0:	0f 90       	pop	r0
 4f2:	0b be       	out	0x3b, r0	; 59
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0
 4fa:	1f 90       	pop	r1
 4fc:	18 95       	reti

000004fe <_exit>:
 4fe:	f8 94       	cli

00000500 <__stop_program>:
 500:	ff cf       	rjmp	.-2      	; 0x500 <__stop_program>
